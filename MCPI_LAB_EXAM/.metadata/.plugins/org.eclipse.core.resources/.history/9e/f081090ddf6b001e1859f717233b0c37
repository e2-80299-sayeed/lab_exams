/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include<stdio.h>
#include<string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
volatile uint32_t value;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uart_recieve(char str[])
{
	char ch;
	int i = 0;/* USER CODE BEGIN Header */

		/* USER CODE END Header */
		/* Includes ------------------------------------------------------------------*/
		#include "main.h"

		/* Private includes ----------------------------------------------------------*/
		/* USER CODE BEGIN Includes */
		/* USER CODE END Includes */

		/* Private typedef -----------------------------------------------------------*/
		/* USER CODE BEGIN PTD */

		/* USER CODE END PTD */

		/* Private define ------------------------------------------------------------*/
		/* USER CODE BEGIN PD */
		/* USER CODE END PD */

		/* Private macro -------------------------------------------------------------*/
		/* USER CODE BEGIN PM */

		/* USER CODE END PM */

		/* Private variables ---------------------------------------------------------*/


		/* USER CODE BEGIN PV */

		/* USER CODE END PV */

		/* Private function prototypes -----------------------------------------------*/
		void SystemClock_Config(void);
		static void MX_GPIO_Init(void);
		static void MX_USART2_UART_Init(void);
		/* USER CODE BEGIN PFP */

		/* USER CODE END PFP */

		/* Private user code ---------------------------------------------------------*/
		/* USER CODE BEGIN 0 */

		/* USER CODE END 0 */

		/**
		  * @brief  The application entry point.
		  * @retval int
		  */
		int main(void)
		{
		  /* USER CODE BEGIN 1 */

		  /* USER CODE END 1 */

		  /* MCU Configuration--------------------------------------------------------*/

		  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
		  HAL_Init();

		  /* USER CODE BEGIN Init */

		  /* USER CODE END Init */

		  /* Configure the system clock */
		  SystemClock_Config();

		  /* USER CODE BEGIN SysInit */

		  /* USER CODE END SysInit */

		  /* Initialize all configured peripherals */
		  MX_GPIO_Init();
		  MX_USART2_UART_Init();
		  /* USER CODE BEGIN 2 */
		  /* USER CODE END 2 */

		  /* Infinite loop */
		  /* USER CODE BEGIN WHILE */
		  while (1)
		  {/* USER CODE BEGIN Header */
			  /**
			    ******************************************************************************
			    * @file           : main.c
			    * @brief          : Main program body
			    ******************************************************************************
			    * @attention
			    *
			    * Copyright (c) 2023 STMicroelectronics.
			    * All rights reserved.
			    *
			    * This software is licensed under terms that can be found in the LICENSE file
			    * in the root directory of this software component.
			    * If no LICENSE file comes with this software, it is provided AS-IS.
			    *
			    ******************************************************************************
			    */
			  /* USER CODE END Header */
			  /* Includes ------------------------------------------------------------------*/
			  #include "main.h"

			  /* Private includes ----------------------------------------------------------*/
			  /* USER CODE BEGIN Includes */

			  /* USER CODE END Includes */

			  /* Private typedef -----------------------------------------------------------*/
			  /* USER CODE BEGIN PTD */

			  /* USER CODE END PTD */

			  /* Private define ------------------------------------------------------------*/
			  /* USER CODE BEGIN PD */

			  /* USER CODE END PD */

			  /* Private macro -------------------------------------------------------------*/
			  /* USER CODE BEGIN PM */

			  /* USER CODE END PM */

			  /* Private variables ---------------------------------------------------------*/

			  /* USER CODE BEGIN PV */

			  /* USER CODE END PV */

			  /* Private function prototypes -----------------------------------------------*/
			  void SystemClock_Config(void);
			  static void MX_GPIO_Init(void);
			  /* USER CODE BEGIN PFP */

			  /* USER CODE END PFP */

			  /* Private user code ---------------------------------------------------------*/
			  /* USER CODE BEGIN 0 */

			  /* USER CODE END 0 */

			  /**
			    * @brief  The application entry point.
			    * @retval int
			    */
			  int main(void)
			  {
			    /* USER CODE BEGIN 1 */

			    /* USER CODE END 1 */

			    /* MCU Configuration--------------------------------------------------------*/

			    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
			    HAL_Init();

			    /* USER CODE BEGIN Init */

			    /* USER CODE END Init */

			    /* Configure the system clock */
			    SystemClock_Config();

			    /* USER CODE BEGIN SysInit */

			    /* USER CODE END SysInit */

			    /* Initialize all configured peripherals */
			    MX_GPIO_Init();
			    /* USER CODE BEGIN 2 */

			    /* USER CODE END 2 */

			    /* Infinite loop */
			    /* USER CODE BEGIN WHILE */
			    while (1)
			    {
			      /* USER CODE END WHILE */

			      /* USER CODE BEGIN 3 */
			    }
			    /* USER CODE END 3 */
			  }

			  /**
			    * @brief System Clock Configuration
			    * @retval None
			    */
			  void SystemClock_Config(void)
			  {
			    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
			    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

			    /** Configure the main internal regulator output voltage
			    */
			    __HAL_RCC_PWR_CLK_ENABLE();
			    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

			    /** Initializes the RCC Oscillators according to the specified parameters
			    * in the RCC_OscInitTypeDef structure.
			    */
			    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
			    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
			    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
			    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
			    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
			    RCC_OscInitStruct.PLL.PLLM = 8;
			    RCC_OscInitStruct.PLL.PLLN = 50;
			    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
			    RCC_OscInitStruct.PLL.PLLQ = 7;
			    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
			    {
			      Error_Handler();
			    }

			    /** Initializes the CPU, AHB and APB buses clocks
			    */
			    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
			    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
			    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
			    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

			    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
			    {
			      Error_Handler();
			    }
			  }

			  /**
			    * @brief GPIO Initialization Function
			    * @param None
			    * @retval None
			    */
			  static void MX_GPIO_Init(void)
			  {
			    GPIO_InitTypeDef GPIO_InitStruct = {0};
			  /* USER CODE BEGIN MX_GPIO_Init_1 */
			  /* USER CODE END MX_GPIO_Init_1 */

			    /* GPIO Ports Clock Enable */
			    __HAL_RCC_GPIOE_CLK_ENABLE();
			    __HAL_RCC_GPIOC_CLK_ENABLE();
			    __HAL_RCC_GPIOH_CLK_ENABLE();
			    __HAL_RCC_GPIOA_CLK_ENABLE();
			    __HAL_RCC_GPIOB_CLK_ENABLE();
			    __HAL_RCC_GPIOD_CLK_ENABLE();

			    /*Configure GPIO pin Output Level */
			    HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);

			    /*Configure GPIO pin Output Level */
			    HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);

			    /*Configure GPIO pin Output Level */
			    HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
			                            |Audio_RST_Pin, GPIO_PIN_RESET);

			    /*Configure GPIO pin : CS_I2C_SPI_Pin */
			    GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
			    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
			    GPIO_InitStruct.Pull = GPIO_NOPULL;
			    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			    HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

			    /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
			    GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
			    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
			    GPIO_InitStruct.Pull = GPIO_NOPULL;
			    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			    HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

			    /*Configure GPIO pin : PDM_OUT_Pin */
			    GPIO_InitStruct.Pin = PDM_OUT_Pin;
			    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			    GPIO_InitStruct.Pull = GPIO_NOPULL;
			    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
			    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

			    /*Configure GPIO pin : B1_Pin */
			    GPIO_InitStruct.Pin = B1_Pin;
			    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
			    GPIO_InitStruct.Pull = GPIO_NOPULL;
			    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

			    /*Configure GPIO pin : I2S3_WS_Pin */
			    GPIO_InitStruct.Pin = I2S3_WS_Pin;
			    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			    GPIO_InitStruct.Pull = GPIO_NOPULL;
			    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
			    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);

			    /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
			    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
			    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			    GPIO_InitStruct.Pull = GPIO_NOPULL;
			    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
			    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

			    /*Configure GPIO pin : BOOT1_Pin */
			    GPIO_InitStruct.Pin = BOOT1_Pin;
			    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
			    GPIO_InitStruct.Pull = GPIO_NOPULL;
			    HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

			    /*Configure GPIO pin : CLK_IN_Pin */
			    GPIO_InitStruct.Pin = CLK_IN_Pin;
			    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			    GPIO_InitStruct.Pull = GPIO_NOPULL;
			    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
			    HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

			    /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
			                             Audio_RST_Pin */
			    GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
			                            |Audio_RST_Pin;
			    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
			    GPIO_InitStruct.Pull = GPIO_NOPULL;
			    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

			    /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
			    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
			    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			    GPIO_InitStruct.Pull = GPIO_NOPULL;
			    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
			    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

			    /*Configure GPIO pin : VBUS_FS_Pin */
			    GPIO_InitStruct.Pin = VBUS_FS_Pin;
			    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
			    GPIO_InitStruct.Pull = GPIO_NOPULL;
			    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);

			    /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
			    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
			    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			    GPIO_InitStruct.Pull = GPIO_NOPULL;
			    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
			    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

			    /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
			    GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
			    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
			    GPIO_InitStruct.Pull = GPIO_NOPULL;
			    HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

			    /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
			    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
			    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
			    GPIO_InitStruct.Pull = GPIO_NOPULL;
			    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
			    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

			    /*Configure GPIO pin : MEMS_INT2_Pin */
			    GPIO_InitStruct.Pin = MEMS_INT2_Pin;
			    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
			    GPIO_InitStruct.Pull = GPIO_NOPULL;
			    HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);

			  /* USER CODE BEGIN MX_GPIO_Init_2 *//* USER CODE BEGIN Header */
			    /**
			      ******************************************************************************
			      * @file           : main.c
			      * @brief          : Main program body
			      ******************************************************************************
			      * @attention
			      *
			      * Copyright (c) 2023 STMicroelectronics.
			      * All rights reserved.
			      *
			      * This software is licensed under terms that can be found in the LICENSE file
			      * in the root directory of this software component.
			      * If no LICENSE file comes with this software, it is provided AS-IS.
			      *
			      ******************************************************************************
			      */
			    /* USER CODE END Header */
			    /* Includes ------------------------------------------------------------------*/
			    #include "main.h"

			    /* Private includes ----------------------------------------------------------*/
			    /* USER CODE BEGIN Includes */

			    /* USER CODE END Includes */

			    /* Private typedef -----------------------------------------------------------*/
			    /* USER CODE BEGIN PTD */

			    /* USER CODE END PTD */

			    /* Private define ------------------------------------------------------------*/
			    /* USER CODE BEGIN PD */

			    /* USER CODE END PD */

			    /* Private macro -------------------------------------------------------------*/
			    /* USER CODE BEGIN PM */

			    /* USER CODE END PM */

			    /* Private variables ---------------------------------------------------------*/

			    /* USER CODE BEGIN PV */

			    /* USER CODE END PV */

			    /* Private function prototypes -----------------------------------------------*/
			    void SystemClock_Config(void);
			    static void MX_GPIO_Init(void);
			    /* USER CODE BEGIN PFP */

			    /* USER CODE END PFP */

			    /* Private user code ---------------------------------------------------------*/
			    /* USER CODE BEGIN 0 */

			    /* USER CODE END 0 */

			    /**
			      * @brief  The application entry point.
			      * @retval int
			      */
			    int main(void)
			    {
			      /* USER CODE BEGIN 1 */

			      /* USER CODE END 1 */

			      /* MCU Configuration--------------------------------------------------------*/

			      /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
			      HAL_Init();

			      /* USER CODE BEGIN Init */

			      /* USER CODE END Init */

			      /* Configure the system clock */
			      SystemClock_Config();

			      /* USER CODE BEGIN SysInit */

			      /* USER CODE END SysInit */

			      /* Initialize all configured peripherals */
			      MX_GPIO_Init();
			      /* USER CODE BEGIN 2 */

			      /* USER CODE END 2 */

			      /* Infinite loop */
			      /* USER CODE BEGIN WHILE */
			      while (1)
			      {
			        /* USER CODE END WHILE */

			        /* USER CODE BEGIN 3 */
			      }
			      /* USER CODE END 3 */
			    }

			    /**
			      * @brief System Clock Configuration
			      * @retval None
			      */
			    void SystemClock_Config(void)
			    {
			      RCC_OscInitTypeDef RCC_OscInitStruct = {0};
			      RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

			      /** Configure the main internal regulator output voltage
			      */
			      __HAL_RCC_PWR_CLK_ENABLE();
			      __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

			      /** Initializes the RCC Oscillators according to the specified parameters
			      * in the RCC_OscInitTypeDef structure.
			      */
			      RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
			      RCC_OscInitStruct.HSIState = RCC_HSI_ON;
			      RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
			      RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
			      RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
			      RCC_OscInitStruct.PLL.PLLM = 8;
			      RCC_OscInitStruct.PLL.PLLN = 50;
			      RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
			      RCC_OscInitStruct.PLL.PLLQ = 7;
			      if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
			      {
			        Error_Handler();
			      }

			      /** Initializes the CPU, AHB and APB buses clocks
			      */
			      RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
			      RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			      RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
			      RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
			      RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

			      if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
			      {
			        Error_Handler();
			      }
			    }

			    /**
			      * @brief GPIO Initialization Function
			      * @param None
			      * @retval None
			      */
			    static void MX_GPIO_Init(void)
			    {
			      GPIO_InitTypeDef GPIO_InitStruct = {0};
			    /* USER CODE BEGIN MX_GPIO_Init_1 */
			    /* USER CODE END MX_GPIO_Init_1 */

			      /* GPIO Ports Clock Enable */
			      __HAL_RCC_GPIOE_CLK_ENABLE();
			      __HAL_RCC_GPIOC_CLK_ENABLE();
			      __HAL_RCC_GPIOH_CLK_ENABLE();
			      __HAL_RCC_GPIOA_CLK_ENABLE();
			      __HAL_RCC_GPIOB_CLK_ENABLE();
			      __HAL_RCC_GPIOD_CLK_ENABLE();

			      /*Configure GPIO pin Output Level */
			      HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);

			      /*Configure GPIO pin Output Level */
			      HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);

			      /*Configure GPIO pin Output Level */
			      HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
			                              |Audio_RST_Pin, GPIO_PIN_RESET);

			      /*Configure GPIO pin : CS_I2C_SPI_Pin */
			      GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
			      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
			      GPIO_InitStruct.Pull = GPIO_NOPULL;
			      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			      HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

			      /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
			      GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
			      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
			      GPIO_InitStruct.Pull = GPIO_NOPULL;
			      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			      HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

			      /*Configure GPIO pin : PDM_OUT_Pin */
			      GPIO_InitStruct.Pin = PDM_OUT_Pin;
			      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			      GPIO_InitStruct.Pull = GPIO_NOPULL;
			      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			      GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
			      HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

			      /*Configure GPIO pin : B1_Pin */
			      GPIO_InitStruct.Pin = B1_Pin;
			      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
			      GPIO_InitStruct.Pull = GPIO_NOPULL;
			      HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

			      /*Configure GPIO pin : I2S3_WS_Pin */
			      GPIO_InitStruct.Pin = I2S3_WS_Pin;
			      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			      GPIO_InitStruct.Pull = GPIO_NOPULL;
			      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			      GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
			      HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);

			      /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
			      GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
			      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			      GPIO_InitStruct.Pull = GPIO_NOPULL;
			      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			      GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
			      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

			      /*Configure GPIO pin : BOOT1_Pin */
			      GPIO_InitStruct.Pin = BOOT1_Pin;
			      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
			      GPIO_InitStruct.Pull = GPIO_NOPULL;
			      HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

			      /*Configure GPIO pin : CLK_IN_Pin */
			      GPIO_InitStruct.Pin = CLK_IN_Pin;
			      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			      GPIO_InitStruct.Pull = GPIO_NOPULL;
			      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			      GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
			      HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

			      /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
			                               Audio_RST_Pin */
			      GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
			                              |Audio_RST_Pin;
			      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
			      GPIO_InitStruct.Pull = GPIO_NOPULL;
			      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

			      /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
			      GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
			      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			      GPIO_InitStruct.Pull = GPIO_NOPULL;
			      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			      GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
			      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

			      /*Configure GPIO pin : VBUS_FS_Pin */
			      GPIO_InitStruct.Pin = VBUS_FS_Pin;
			      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
			      GPIO_InitStruct.Pull = GPIO_NOPULL;
			      HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);

			      /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
			      GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
			      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			      GPIO_InitStruct.Pull = GPIO_NOPULL;
			      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			      GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
			      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

			      /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
			      GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
			      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
			      GPIO_InitStruct.Pull = GPIO_NOPULL;
			      HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

			      /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
			      GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
			      GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
			      GPIO_InitStruct.Pull = GPIO_NOPULL;
			      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			      GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
			      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

			      /*Configure GPIO pin : MEMS_INT2_Pin */
			      GPIO_InitStruct.Pin = MEMS_INT2_Pin;
			      GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
			      GPIO_InitStruct.Pull = GPIO_NOPULL;
			      HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);

			    /* USER CODE BEGIN MX_GPIO_Init_2 */
			    /* USER CODE END MX_GPIO_Init_2 */
			    }

			    /* USER CODE BEGIN 4 */

			    /* USER CODE END 4 */

			    /**
			      * @brief  This function is executed in case of error occurrence.
			      * @retval None
			      */
			    void Error_Handler(void)
			    {
			      /* USER CODE BEGIN Error_Handler_Debug */
			      /* User can add his own implementation to report the HAL error return state */
			      __disable_irq();
			      while (1)
			      {
			      }
			      /* USER CODE END Error_Handler_Debug */
			    }

			    #ifdef  USE_FULL_ASSERT
			    /**
			      * @brief  Reports the name of the source file and the source line number
			      *         where the assert_param error has occurred.
			      * @param  file: pointer to the source file name
			      * @param  line: assert_param error line source number
			      * @retval None
			      */
			    void assert_failed(uint8_t *file, uint32_t line)
			    {
			      /* USER CODE BEGIN 6 */
			      /* User can add his own implementation to report the file name and line number,
			         ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
			      /* USER CODE END 6 */
			    }
			    #endif /* USE_FULL_ASSERT */

			  /* USER CODE END MX_GPIO_Init_2 */
			  }

			  /* USER CODE BEGIN 4 */

			  /* USER CODE END 4 */

			  /**
			    * @brief  This function is executed in case of error occurrence.
			    * @retval None
			    */
			  void Error_Handler(void)
			  {
			    /* USER CODE BEGIN Error_Handler_Debug */LD5_Pin
			    /* User can add his own implementation to report the HAL error return state */
			    __disable_irq();
			    while (1)
			    {
			    }
			    /* USER CODE END Error_Handler_Debug */
			  }

			  #ifdef  USE_FULL_ASSERT
			  /**
			    * @brief  Reports the name of the source file and the source line number
			    *         where the assert_param error has occurred.
			    * @param  file: pointer to the source file name
			    * @param  line: assert_param error line/* USER CODE BEGIN Header */
		/**
		  ******************************************************************************
		  * @file           : main.c
		  * @brief          : Main program bodyLD5_Pin
		  ******************************************************************************
		  * @attention
		  *
		  * Copyright (c) 2023 STMicroelectronics.
		  * All rights reserved.
		  *
		  * This software is licensed under terms that can be found in the LICENSE file
		  * in the root directory of this software component.
		  * If no LICENSE file comes with this software, it is provided AS-IS.
		  *
		  ******************************************************************************
		  */
		/* USER CODE END Header */
		/* Includes ------------------------------------------------------------------*/
		#include "main.h"

		/* Private includes ----------------------------------------------------------*/
		/* USER CODE BEGIN Includes */

		/* USER CODE END Includes */

		/* Private typedef -----------------------------------------------------------*/
		/* USER CODE BEGIN PTD */

		/* USER CODE END PTD */

		/* Private define ------------------------------------------------------------*/
		/* USER CODE BEGIN PD */

		/* USER CODE END PD */

		/* Private macro -------------------------------------------------------------*/
		/* USER CODE BEGIN PM */

		/* USER CODE END PM */

		/* Private variables ---------------------------------------------------------*/
			  LD5_Pin
		/* USER CODE BEGIN PV */

		/* USER CODE END PV */

		/* Private function prototypes -----------------------------------------------*/
		void SystemClock_Config(void);
		static void MX_GPIO_Init(void);
		/* USER CODE BEGIN PFP */

		/* USER CODE END PFP */

		/* Private user code ---------------------------------------------------------*/
		/* USER CODE BEGIN 0 */

		/* USER CODE END 0 */

		/**
		  * @brief  The application entry point.
		  * @retval int
		  */
		int main(void)
		{
		  /* USER CODE BEGIN 1 */

		  /* USER CODE END 1 */LD5_Pin

		  /* MCU Configuration--------------------------------------------------------*/

		  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
		  HAL_Init();

		  /* USER CODE BEGIN Init */

		  /* USER CODE END Init */

		  /* Configure the system clock */
		  SystemClock_Config();

		  /* USER CODE BEGIN SysInit */

		  /* USER CODE END SysInit */

		  /* Initialize all configured peripherals */
		  MX_GPIO_Init();
		  /* USER CODE BEGIN 2 */

		  /* USER CODE END 2 */

		  /* Infinite loop */
		  /* USER CODE BEGIN WHILE */
		  while (1)
		  {
		    /* USER CODE END WHILE */

		    /* USER CODE BEGIN 3 */
		  }
		  /* USER CODE END 3 */
		}

		/**
		  * @brief System Clock Configuration
		  * @retval None
		  */
		void SystemClock_Config(void)
		{
		  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
		  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

		  /** Configure the main internal regulator output voltage
		  */LD5_Pin
		  __HAL_RCC_PWR_CLK_ENABLE();
		  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

		  /** Initializes the RCC Oscillators according to the specified parameters
		  * in the RCC_OscInitTypeDef structure.
		  */
		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATIOLD5_PinN_DEFAULT;
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
		  RCC_OscInitStruct.PLL.PLLM = 8;
		  RCC_OscInitStruct.PLL.PLLN = 50;
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
		  RCC_OscInitStruct.PLL.PLLQ = 7;
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
		  {
		    Error_Handler();
		  }

		  /** Initializes the CPU, AHB and APB buses clocks
		  */
		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
		                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
		  {
		    Error_Handler();
		  }
		}

		/**
		  * @brief GPIO Initialization Function
		  * @param None
		  * @retval None
		  */
		static void MX_GPIO_Init(void)
		{
		  GPIO_InitTypeDef GPIO_InitStruct = {0};
		/* USER CODE BEGIN MX_GPIO_Init_1 */
		/* USER CODE END MX_GPIO_Init_1 */

		  /* GPIO Ports Clock Enable */
		  __HAL_RCC_GPIOE_CLK_ENABLE();
		  __HAL_RCC_GPIOC_CLK_ENABLE();
		  __HAL_RCC_GPIOH_CLK_ENABLE();
		  __HAL_RCC_GPIOA_CLK_ENABLE();
		  __HAL_RCC_GPIOB_CLK_ENABLE();
		  __HAL_RCC_GPIOD_CLK_ENABLE();

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
		                          |Audio_RST_Pin, GPIO_PIN_RESET);

		  /*Configure GPIO pin : CS_I2C_SPI_Pin */
		  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
		  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

		  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
		  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
		  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

		  /*Configure GPIO pin : PDM_OUT_Pin */
		  GPIO_InitStruct.Pin = PDM_OUT_Pin;
		  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
		  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

		  /*Configure GPIO pin : B1_Pin */
		  GPIO_InitStruct.Pin = B1_Pin;
		  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
		  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

		  /*Configure GPIO pin : I2S3_WS_Pin */
		  GPIO_InitStruct.Pin = I2S3_WS_Pin;
		  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
		  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);

		  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
		  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
		  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
		  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

		  /*Configure GPIO pin : BOOT1_Pin */
		  GPIO_InitStruct.Pin = BOOT1_Pin;
		  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
		  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

		  /*Configure GPIO pin : CLK_IN_Pin */
		  GPIO_InitStruct.Pin = CLK_IN_Pin;
		  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
		  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

		  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
		                           Audio_RST_Pin */
		  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
		                          |Audio_RST_Pin;
		  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

		  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
		  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
		  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
		  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

		  /*Configure GPIO pin : VBUS_FS_Pin */
		  GPIO_InitStruct.Pin = VBUS_FS_Pin;
		  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
		  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);

		  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
		  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
		  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
		  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

		  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
		  GPIO_I/**
			  ******************************************************************************
			  * @file           : main.c
			  * @brief          : Main program body
			  ******************************************************************************
			  * @attention
			  *
			  * Copyright (c) 2023 STMicroelectronics.
			  * All rights reserved.
			  *
			  * This software is licensed under terms that can be found in the LICENSE file
			  * in the root directory of this software component.
			  * If no LICENSE file comes with this software, it is provided AS-IS.
			  *
			  ******************************************************************************
			  */
			/* USER CODE END Header */
			/* Includes ------------------------------------------------------------------*/
			#include "main.h"

			/* Private includes ----------------------------------------------------------*/
			/* USER CODE BEGIN Includes */
			#include<stdio.h>
			#include<string.h>
			/* USER CODE END Includes */

			/* Private typedef -----------------------------------------------------------*/
			/* USER CODE BEGIN PTD */

			/* USER CODE END PTD */

			/* Private define ------------------------------------------------------------*/
			/* USER CODE BEGIN PD */
			/* USER CODE END PD */

			/* Private macro -------------------------------------------------------------*/
			/* USER CODE BEGIN PM */

			/* USER CODE END PM */

			/* Private variables ---------------------------------------------------------*/
			UART_HandleTypeDef huart2;

			/* USER CODE BEGIN PV */
			volatile uint32_t value;
			/* USER CODE END PV */

			/* Private function prototypes -----------------------------------------------*/
			void SystemClock_Config(void);
			static void MX_GPIO_Init(void);
			static void MX_USART2_UART_Init(void);
			/* USER CODE BEGIN PFP */

			/* USER CODE END PFP */

			/* Private user code ---------------------------------------------------------*/
			/* USER CODE BEGIN 0 */
			void uart_recieve(char str[])
			{
				char ch;
				int i = 0;
				do
				{
					HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
					str[i++] = ch;
				}while(ch != '\r');
				str[i++] = '\n';
				str[i] = '\0';
			}
			/* USER CODE END 0 */

			/**
			  * @brief  The application entry point.
			  * @retval int
			  */
			int main(void)
			{
			  /* USER CODE BEGIN 1 */
				uint8_t choice;
				char str[20];
			  /* USER CODE END 1 */

			  /* MCU Configuration--------------------------------------------------------*/

			  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
			  HAL_Init();

			  /* USER CODE BEGIN Init */

			  /* USER CODE END Init */

			  /* Configure the system clock */
			  SystemClock_Config();

			  /* USER CODE BEGIN SysInit */

			  /* USER CODE END SysInit */

			  /* Initialize all configured peripherals */
			  MX_GPIO_Init();
			  MX_USART2_UART_Init();
			  /* USER CODE BEGIN 2 */
			  /* USER CODE END 2 */

			  /* Infinite loop */
			  /* USER CODE BEGIN WHILE */
			  while (1)
			  {/* USER CODE BEGIN Header */
				  /**
				    ******************************************************************************
				    * @file           : main.c
				    * @brief          : Main program body
				    ******************************************************************************
				    * @attention
				    *
				    * Copyright (c) 2023 STMicroelectronics.
				    * All rights reserved.
				    *
				    * This software is licensed under terms that can be found in the LICENSE file
				    * in the root directory of this software component.
				    * If no LICENSE file comes with this software, it is provided AS-IS.
				    *
				    ******************************************************************************
				    */
				  /* USER CODE END Header */
				  /* Includes ------------------------------------------------------------------*/
				  #include "main.h"

				  /* Private includes ----------------------------------------------------------*/
				  /* USER CODE BEGIN Includes */

				  /* USER CODE END Includes */

				  /* Private typedef -----------------------------------------------------------*/
				  /* USER CODE BEGIN PTD */

				  /* USER CODE END PTD */

				  /* Private define ------------------------------------------------------------*/
				  /* USER CODE BEGIN PD */

				  /* USER CODE END PD */

				  /* Private macro -------------------------------------------------------------*/
				  /* USER CODE BEGIN PM */

				  /* USER CODE END PM */

				  /* Private variables ---------------------------------------------------------*/

				  /* USER CODE BEGIN PV */

				  /* USER CODE END PV */

				  /* Private function prototypes -----------------------------------------------*/
				  void SystemClock_Config(void);
				  static void MX_GPIO_Init(void);
				  /* USER CODE BEGIN PFP */

				  /* USER CODE END PFP */

				  /* Private user code ---------------------------------------------------------*/
				  /* USER CODE BEGIN 0 */

				  /* USER CODE END 0 */

				  /**
				    * @brief  The application entry point.
				    * @retval int
				    */
				  int main(void)
				  {
				    /* USER CODE BEGIN 1 */

				    /* USER CODE END 1 */

				    /* MCU Configuration--------------------------------------------------------*/

				    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
				    HAL_Init();

				    /* USER CODE BEGIN Init */

				    /* USER CODE END Init */

				    /* Configure the system clock */
				    SystemClock_Config();

				    /* USER CODE BEGIN SysInit */

				    /* USER CODE END SysInit */

				    /* Initialize all configured peripherals */
				    MX_GPIO_Init();
				    /* USER CODE BEGIN 2 */

				    /* USER CODE END 2 */

				    /* Infinite loop */
				    /* USER CODE BEGIN WHILE */
				    while (1)
				    {
				      /* USER CODE END WHILE */

				      /* USER CODE BEGIN 3 */
				    }
				    /* USER CODE END 3 */
				  }

				  /**
				    * @brief System Clock Configuration
				    * @retval None
				    */
				  void SystemClock_Config(void)
				  {
				    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
				    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

				    /** Configure the main internal regulator output voltage
				    */
				    __HAL_RCC_PWR_CLK_ENABLE();
				    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

				    /** Initializes the RCC Oscillators according to the specified parameters
				    * in the RCC_OscInitTypeDef structure.
				    */
				    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
				    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
				    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
				    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
				    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
				    RCC_OscInitStruct.PLL.PLLM = 8;
				    RCC_OscInitStruct.PLL.PLLN = 50;
				    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
				    RCC_OscInitStruct.PLL.PLLQ = 7;
				    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
				    {
				      Error_Handler();
				    }

				    /** Initializes the CPU, AHB and APB buses clocks
				    */
				    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
				                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
				    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
				    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
				    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
				    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

				    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
				    {
				      Error_Handler();
				    }
				  }

				  /**
				    * @brief GPIO Initialization Function
				    * @param None
				    * @retval None
				    */
				  static void MX_GPIO_Init(void)
				  {
				    GPIO_InitTypeDef GPIO_InitStruct = {0};
				  /* USER CODE BEGIN MX_GPIO_Init_1 */
				  /* USER CODE END MX_GPIO_Init_1 */

				    /* GPIO Ports Clock Enable */
				    __HAL_RCC_GPIOE_CLK_ENABLE();
				    __HAL_RCC_GPIOC_CLK_ENABLE();
				    __HAL_RCC_GPIOH_CLK_ENABLE();
				    __HAL_RCC_GPIOA_CLK_ENABLE();
				    __HAL_RCC_GPIOB_CLK_ENABLE();
				    __HAL_RCC_GPIOD_CLK_ENABLE();

				    /*Configure GPIO pin Output Level */
				    HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);

				    /*Configure GPIO pin Output Level */
				    HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);

				    /*Configure GPIO pin Output Level */
				    HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
				                            |Audio_RST_Pin, GPIO_PIN_RESET);

				    /*Configure GPIO pin : CS_I2C_SPI_Pin */
				    GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
				    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
				    GPIO_InitStruct.Pull = GPIO_NOPULL;
				    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				    HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

				    /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
				    GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
				    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
				    GPIO_InitStruct.Pull = GPIO_NOPULL;
				    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				    HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

				    /*Configure GPIO pin : PDM_OUT_Pin */
				    GPIO_InitStruct.Pin = PDM_OUT_Pin;
				    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
				    GPIO_InitStruct.Pull = GPIO_NOPULL;
				    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
				    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

				    /*Configure GPIO pin : B1_Pin */
				    GPIO_InitStruct.Pin = B1_Pin;
				    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
				    GPIO_InitStruct.Pull = GPIO_NOPULL;
				    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

				    /*Configure GPIO pin : I2S3_WS_Pin */
				    GPIO_InitStruct.Pin = I2S3_WS_Pin;
				    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
				    GPIO_InitStruct.Pull = GPIO_NOPULL;
				    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
				    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);

				    /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
				    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
				    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
				    GPIO_InitStruct.Pull = GPIO_NOPULL;
				    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
				    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

				    /*Configure GPIO pin : BOOT1_Pin */
				    GPIO_InitStruct.Pin = BOOT1_Pin;
				    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
				    GPIO_InitStruct.Pull = GPIO_NOPULL;
				    HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

				    /*Configure GPIO pin : CLK_IN_Pin */
				    GPIO_InitStruct.Pin = CLK_IN_Pin;
				    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
				    GPIO_InitStruct.Pull = GPIO_NOPULL;
				    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
				    HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

				    /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
				                             Audio_RST_Pin */
				    GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
				                            |Audio_RST_Pin;
				    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
				    GPIO_InitStruct.Pull = GPIO_NOPULL;
				    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

				    /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
				    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
				    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
				    GPIO_InitStruct.Pull = GPIO_NOPULL;
				    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
				    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

				    /*Configure GPIO pin : VBUS_FS_Pin */
				    GPIO_InitStruct.Pin = VBUS_FS_Pin;
				    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
				    GPIO_InitStruct.Pull = GPIO_NOPULL;
				    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);

				    /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
				    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
				    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
				    GPIO_InitStruct.Pull = GPIO_NOPULL;
				    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
				    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

				    /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
				    GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
				    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
				    GPIO_InitStruct.Pull = GPIO_NOPULL;
				    HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

				    /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
				    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
				    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
				    GPIO_InitStruct.Pull = GPIO_NOPULL;
				    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
				    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

				    /*Configure GPIO pin : MEMS_INT2_Pin */
				    GPIO_InitStruct.Pin = MEMS_INT2_Pin;
				    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
				    GPIO_InitStruct.Pull = GPIO_NOPULL;
				    HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);

				  /* USER CODE BEGIN MX_GPIO_Init_2 *//* USER CODE BEGIN Header */
				    /**
				      ******************************************************************************
				      * @file           : main.c
				      * @brief          : Main program body
				      ******************************************************************************
				      * @attention
				      *
				      * Copyright (c) 2023 STMicroelectronics.
				      * All rights reserved.
				      *
				      * This software is licensed under terms that can be found in the LICENSE file
				      * in the root directory of this software component.
				      * If no LICENSE file comes with this software, it is provided AS-IS.
				      *
				      ******************************************************************************
				      */
				    /* USER CODE END Header */
				    /* Includes ------------------------------------------------------------------*/
				    #include "main.h"

				    /* Private includes ----------------------------------------------------------*/
				    /* USER CODE BEGIN Includes */

				    /* USER CODE END Includes */

				    /* Private typedef -----------------------------------------------------------*/
				    /* USER CODE BEGIN PTD */

				    /* USER CODE END PTD */

				    /* Private define ------------------------------------------------------------*/
				    /* USER CODE BEGIN PD */

				    /* USER CODE END PD */

				    /* Private macro -------------------------------------------------------------*/
				    /* USER CODE BEGIN PM */

				    /* USER CODE END PM */

				    /* Private variables ---------------------------------------------------------*/

				    /* USER CODE BEGIN PV */

				    /* USER CODE END PV */

				    /* Private function prototypes -----------------------------------------------*/
				    void SystemClock_Config(void);
				    static void MX_GPIO_Init(void);
				    /* USER CODE BEGIN PFP */

				    /* USER CODE END PFP */

				    /* Private user code ---------------------------------------------------------*/
				    /* USER CODE BEGIN 0 */

				    /* USER CODE END 0 */

				    /**
				      * @brief  The application entry point.
				      * @retval int
				      */
				    int main(void)
				    {
				      /* USER CODE BEGIN 1 */

				      /* USER CODE END 1 */

				      /* MCU Configuration--------------------------------------------------------*/

				      /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
				      HAL_Init();

				      /* USER CODE BEGIN Init */

				      /* USER CODE END Init */

				      /* Configure the system clock */
				      SystemClock_Config();

				      /* USER CODE BEGIN SysInit */

				      /* USER CODE END SysInit */

				      /* Initialize all configured peripherals */
				      MX_GPIO_Init();
				      /* USER CODE BEGIN 2 */

				      /* USER CODE END 2 */

				      /* Infinite loop */
				      /* USER CODE BEGIN WHILE */
				      while (1)
				      {
				        /* USER CODE END WHILE */

				        /* USER CODE BEGIN 3 */
				      }
				      /* USER CODE END 3 */
				    }

				    /**
				      * @brief System Clock Configuration
				      * @retval None
				      */
				    void SystemClock_Config(void)
				    {
				      RCC_OscInitTypeDef RCC_OscInitStruct = {0};
				      RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

				      /** Configure the main internal regulator output voltage
				      */
				      __HAL_RCC_PWR_CLK_ENABLE();
				      __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

				      /** Initializes the RCC Oscillators according to the specified parameters
				      * in the RCC_OscInitTypeDef structure.
				      */
				      RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
				      RCC_OscInitStruct.HSIState = RCC_HSI_ON;
				      RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
				      RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
				      RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
				      RCC_OscInitStruct.PLL.PLLM = 8;
				      RCC_OscInitStruct.PLL.PLLN = 50;
				      RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
				      RCC_OscInitStruct.PLL.PLLQ = 7;
				      if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
				      {
				        Error_Handler();
				      }

				      /** Initializes the CPU, AHB and APB buses clocks
				      */
				      RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
				                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
				      RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
				      RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
				      RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
				      RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

				      if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
				      {
				        Error_Handler();
				      }
				    }

				    /**
				      * @brief GPIO Initialization Function
				      * @param None
				      * @retval None
				      */
				    static void MX_GPIO_Init(void)
				    {
				      GPIO_InitTypeDef GPIO_InitStruct = {0};
				    /* USER CODE BEGIN MX_GPIO_Init_1 */
				    /* USER CODE END MX_GPIO_Init_1 */

				      /* GPIO Ports Clock Enable */
				      __HAL_RCC_GPIOE_CLK_ENABLE();
				      __HAL_RCC_GPIOC_CLK_ENABLE();
				      __HAL_RCC_GPIOH_CLK_ENABLE();
				      __HAL_RCC_GPIOA_CLK_ENABLE();
				      __HAL_RCC_GPIOB_CLK_ENABLE();
				      __HAL_RCC_GPIOD_CLK_ENABLE();

				      /*Configure GPIO pin Output Level */
				      HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);

				      /*Configure GPIO pin Output Level */
				      HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);

				      /*Configure GPIO pin Output Level */
				      HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
				                              |Audio_RST_Pin, GPIO_PIN_RESET);

				      /*Configure GPIO pin : CS_I2C_SPI_Pin */
				      GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
				      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
				      GPIO_InitStruct.Pull = GPIO_NOPULL;
				      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				      HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

				      /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
				      GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
				      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
				      GPIO_InitStruct.Pull = GPIO_NOPULL;
				      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				      HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

				      /*Configure GPIO pin : PDM_OUT_Pin */
				      GPIO_InitStruct.Pin = PDM_OUT_Pin;
				      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
				      GPIO_InitStruct.Pull = GPIO_NOPULL;
				      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				      GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
				      HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

				      /*Configure GPIO pin : B1_Pin */
				      GPIO_InitStruct.Pin = B1_Pin;
				      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
				      GPIO_InitStruct.Pull = GPIO_NOPULL;
				      HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

				      /*Configure GPIO pin : I2S3_WS_Pin */
				      GPIO_InitStruct.Pin = I2S3_WS_Pin;
				      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
				      GPIO_InitStruct.Pull = GPIO_NOPULL;
				      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				      GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
				      HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);

				      /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
				      GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
				      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
				      GPIO_InitStruct.Pull = GPIO_NOPULL;
				      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				      GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
				      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

				      /*Configure GPIO pin : BOOT1_Pin */
				      GPIO_InitStruct.Pin = BOOT1_Pin;
				      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
				      GPIO_InitStruct.Pull = GPIO_NOPULL;
				      HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

				      /*Configure GPIO pin : CLK_IN_Pin */
				      GPIO_InitStruct.Pin = CLK_IN_Pin;
				      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
				      GPIO_InitStruct.Pull = GPIO_NOPULL;
				      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				      GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
				      HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

				      /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
				                               Audio_RST_Pin */
				      GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
				                              |Audio_RST_Pin;
				      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
				      GPIO_InitStruct.Pull = GPIO_NOPULL;
				      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

				      /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
				      GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
				      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
				      GPIO_InitStruct.Pull = GPIO_NOPULL;
				      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				      GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
				      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

				      /*Configure GPIO pin : VBUS_FS_Pin */
				      GPIO_InitStruct.Pin = VBUS_FS_Pin;
				      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
				      GPIO_InitStruct.Pull = GPIO_NOPULL;
				      HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);

				      /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
				      GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
				      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
				      GPIO_InitStruct.Pull = GPIO_NOPULL;
				      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				      GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
				      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

				      /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
				      GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
				      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
				      GPIO_InitStruct.Pull = GPIO_NOPULL;
				      HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

				      /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
				      GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
				      GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
				      GPIO_InitStruct.Pull = GPIO_NOPULL;
				      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
				      GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
				      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

				      /*Configure GPIO pin : MEMS_INT2_Pin */
				      GPIO_InitStruct.Pin = MEMS_INT2_Pin;
				      GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
				      GPIO_InitStruct.Pull = GPIO_NOPULL;
				      HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);

				    /* USER CODE BEGIN MX_GPIO_Init_2 */
				    /* USER CODE END MX_GPIO_Init_2 */
				    }

				    /* USER CODE BEGIN 4 */

				    /* USER CODE END 4 */

				    /**
				      * @brief  This function is executed in case of error occurrence.
				      * @retval None
				      */
				    void Error_Handler(void)
				    {
				      /* USER CODE BEGIN Error_Handler_Debug */
				      /* User can add his own implementation to report the HAL error return state */
				      __disable_irq();
				      while (1)
				      {
				      }
				      /* USER CODE END Error_Handler_Debug */
				    }

				    #ifdef  USE_FULL_ASSERT
				    /**
				      * @brief  Reports the name of the source file and the source line number
				      *         where the assert_param error has occurred.
				      * @param  file: pointer to the source file name
				      * @param  line: assert_param error line source number
				      * @retval None
				      */
				    void assert_failed(uint8_t *file, uint32_t line)
				    {
				      /* USER CODE BEGIN 6 */
				      /* User can add his own implementation to report the file name and line number,
				         ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
				      /* USER CODE END 6 */
				    }
				    #endif /* USE_FULL_ASSERT */

				  /* USER CODE END MX_GPIO_Init_2 */
				  }

				  /* USER CODE BEGIN 4 */

				  /* USER CODE END 4 */

				  /**
				    * @brief  This function is executed in case of error occurrence.
				    * @retval None
				    */
				  void Error_Handler(void)
				  {
				    /* USER CODE BEGIN Error_Handler_Debug */LD5_Pin
				    /* User can add his own implementation to report the HAL error return state */
				    __disable_irq();
				    while (1)
				    {
				    }
				    /* USER CODE END Error_Handler_Debug */
				  }

				  #ifdef  USE_FULL_ASSERT
				  /**
				    * @brief  Reports the name of the source file and the source line number
				    *         where the assert_param error has occurred.
				    * @param  file: pointer to the source file name
				    * @param  line: assert_param error line/* USER CODE BEGIN Header */
			/**
			  ******************************************************************************
			  * @file           : main.c
			  * @brief          : Main program bodyLD5_Pin
			  ******************************************************************************
			  * @attention
			  *
			  * Copyright (c) 2023 STMicroelectronics.
			  * All rights reserved.
			  *
			  * This software is licensed under terms that can be found in the LICENSE file
			  * in the root directory of this software component.
			  * If no LICENSE file comes with this software, it is provided AS-IS.
			  *
			  ******************************************************************************
			  */
			/* USER CODE END Header */
			/* Includes ------------------------------------------------------------------*/
			#include "main.h"

			/* Private includes ----------------------------------------------------------*/
			/* USER CODE BEGIN Includes */

			/* USER CODE END Includes */

			/* Private typedef -----------------------------------------------------------*/
			/* USER CODE BEGIN PTD */

			/* USER CODE END PTD */

			/* Private define ------------------------------------------------------------*/
			/* USER CODE BEGIN PD */

			/* USER CODE END PD */

			/* Private macro -------------------------------------------------------------*/
			/* USER CODE BEGIN PM */

			/* USER CODE END PM */

			/* Private variables ---------------------------------------------------------*/
				  LD5_Pin
			/* USER CODE BEGIN PV */

			/* USER CODE END PV */

			/* Private function prototypes -----------------------------------------------*/
			void SystemClock_Config(void);
			static void MX_GPIO_Init(void);
			/* USER CODE BEGIN PFP */

			/* USER CODE END PFP */

			/* Private user code ---------------------------------------------------------*/
			/* USER CODE BEGIN 0 */

			/* USER CODE END 0 */

			/**
			  * @brief  The application entry point.
			  * @retval int
			  */
			int main(void)
			{
			  /* USER CODE BEGIN 1 */

			  /* USER CODE END 1 */LD5_Pin

			  /* MCU Configuration--------------------------------------------------------*/

			  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
			  HAL_Init();

			  /* USER CODE BEGIN Init */

			  /* USER CODE END Init */

			  /* Configure the system clock */
			  SystemClock_Config();

			  /* USER CODE BEGIN SysInit */

			  /* USER CODE END SysInit */

			  /* Initialize all configured peripherals */
			  MX_GPIO_Init();
			  /* USER CODE BEGIN 2 */

			  /* USER CODE END 2 */

			  /* Infinite loop */
			  /* USER CODE BEGIN WHILE */
			  while (1)
			  {
			    /* USER CODE END WHILE */

			    /* USER CODE BEGIN 3 */
			  }
			  /* USER CODE END 3 */
			}

			/**
			  * @brief System Clock Configuration
			  * @retval None
			  */
			void SystemClock_Config(void)
			{
			  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
			  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

			  /** Configure the main internal regulator output voltage
			  */LD5_Pin
			  __HAL_RCC_PWR_CLK_ENABLE();
			  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

			  /** Initializes the RCC Oscillators according to the specified parameters
			  * in the RCC_OscInitTypeDef structure.
			  */
			  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
			  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
			  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATIOLD5_PinN_DEFAULT;
			  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
			  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
			  RCC_OscInitStruct.PLL.PLLM = 8;
			  RCC_OscInitStruct.PLL.PLLN = 50;
			  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
			  RCC_OscInitStruct.PLL.PLLQ = 7;
			  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
			  {
			    Error_Handler();
			  }

			  /** Initializes the CPU, AHB and APB buses clocks
			  */
			  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
			  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
			  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
			  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

			  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
			  {
			    Error_Handler();
			  }
			}

			/**
			  * @brief GPIO Initialization Function
			  * @param None
			  * @retval None
			  */
			static void MX_GPIO_Init(void)
			{
			  GPIO_InitTypeDef GPIO_InitStruct = {0};
			/* USER CODE BEGIN MX_GPIO_Init_1 */
			/* USER CODE END MX_GPIO_Init_1 */

			  /* GPIO Ports Clock Enable */
			  __HAL_RCC_GPIOE_CLK_ENABLE();
			  __HAL_RCC_GPIOC_CLK_ENABLE();
			  __HAL_RCC_GPIOH_CLK_ENABLE();
			  __HAL_RCC_GPIOA_CLK_ENABLE();
			  __HAL_RCC_GPIOB_CLK_ENABLE();
			  __HAL_RCC_GPIOD_CLK_ENABLE();

			  /*Configure GPIO pin Output Level */
			  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);

			  /*Configure GPIO pin Output Level */
			  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);

			  /*Configure GPIO pin Output Level */
			  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
			                          |Audio_RST_Pin, GPIO_PIN_RESET);

			  /*Configure GPIO pin : CS_I2C_SPI_Pin */
			  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
			  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
			  GPIO_InitStruct.Pull = GPIO_NOPULL;
			  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

			  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
			  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
			  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
			  GPIO_InitStruct.Pull = GPIO_NOPULL;
			  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

			  /*Configure GPIO pin : PDM_OUT_Pin */
			  GPIO_InitStruct.Pin = PDM_OUT_Pin;
			  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			  GPIO_InitStruct.Pull = GPIO_NOPULL;
			  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
			  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

			  /*Configure GPIO pin : B1_Pin */
			  GPIO_InitStruct.Pin = B1_Pin;
			  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
			  GPIO_InitStruct.Pull = GPIO_NOPULL;
			  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

			  /*Configure GPIO pin : I2S3_WS_Pin */
			  GPIO_InitStruct.Pin = I2S3_WS_Pin;
			  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			  GPIO_InitStruct.Pull = GPIO_NOPULL;
			  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
			  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);

			  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
			  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
			  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			  GPIO_InitStruct.Pull = GPIO_NOPULL;
			  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
			  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

			  /*Configure GPIO pin : BOOT1_Pin */
			  GPIO_InitStruct.Pin = BOOT1_Pin;
			  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
			  GPIO_InitStruct.Pull = GPIO_NOPULL;
			  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

			  /*Configure GPIO pin : CLK_IN_Pin */
			  GPIO_InitStruct.Pin = CLK_IN_Pin;
			  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			  GPIO_InitStruct.Pull = GPIO_NOPULL;
			  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
			  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

			  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
			                           Audio_RST_Pin */
			  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
			                          |Audio_RST_Pin;
			  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
			  GPIO_InitStruct.Pull = GPIO_NOPULL;
			  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

			  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
			  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
			  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			  GPIO_InitStruct.Pull = GPIO_NOPULL;
			  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
			  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

			  /*Configure GPIO pin : VBUS_FS_Pin */
			  GPIO_InitStruct.Pin = VBUS_FS_Pin;
			  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
			  GPIO_InitStruct.Pull = GPIO_NOPULL;
			  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);

			  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
			  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
			  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			  GPIO_InitStruct.Pull = GPIO_NOPULL;
			  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
			  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

			  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
			  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
			  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
			  GPIO_InitStruct.Pull = GPIO_NOPULL;
			  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

			  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
			  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
			  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
			  GPIO_InitStruct.Pull = GPIO_NOPULL;
			  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
			  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

			  /*Configure GPIO pin : MEMS_INT2_Pin */
			  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
			  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
			  GPIO_InitStruct.Pull = GPIO_NOPULL;
			  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);

			/* USER CODE BEGIN MX_GPIO_Init_2 */
			/* USER CODE END MX_GPIO_Init_2 */
			}

			/* USER CODE BEGIN 4 */

			/* USER CODE END 4 */

			/**
			  * @brief  This function is executed in case of error occurrence.
			  * @retval None
			  */
			void Error_Handler(void)
			{
			  /* USER CODE BEGIN Error_Handler_Debug */
			  /* User can add his own implementation to report the HAL error return state */
			  __disable_irq();
			  while (1)
			  {
			  }
			  /* USER CODE END Error_Handler_Debug */
			}

			#ifdef  USE_FULL_ASSERT
			/**
			  * @brief  Reports the name of the source file and the source line number
			  *         where the assert_param error has occurred.
			  * @param  file: pointer to the source file name
			  * @param  line: assert_param error line source number
			  * @retval None
			  */
			void assert_failed(uint8_t *file, uint32_t line)
			{
			  /* USER CODE BEGIN 6 */
			  /* User can add his own implementation to report the file name and line number,
			     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
			  /* USER CODE END 6 */
			}
			#endif /* USE_FULL_ASSERT */
				    *  source number
				    * @retval None
				    */
				  void assert_failed(uint8_t *file, uint32_t line)
				  {
				    /* USER CODE BEGIN 6 */
				    /* User can add his own implementation to report the file name and line number,
				       ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
				    /* USER CODE END 6 */
				  }
				  #endif /* USE_FULL_ASSERT */

			    /* USER CODE END WHILE */
		-
			    /* USER CODE BEGIN 3 */
				  HAL_UART_Transmit(&huart2, (uint8_t *)"Name: MOHD SAYEED\r\n", sizeof("Name: MOHD SAYEED\r\n"), HAL_MAX_DELAY);
				  HAL_UART_Transmit(&huart2, (uint8_t *)"Roll_n0 : 80299\r\n", sizeof("Roll_n0 : 80299\r\n"), HAL_MAX_DELAY);

				  HAL_UART_Transmit(&huart2, (uint8_t *)"1. LED pattern\r\n", sizeof("1. LED pattern\r\n"), HAL_MAX_DELAY);
				  HAL_UART_Transmit(&huart2, (uint8_t *)"2. Parity check\r\n", sizeof("2. Parity check\r\n"), HAL_MAX_DELAY);
				  HAL_UART_Transmit(&huart2, (uint8_t *)"3. ADC reading\r\n", sizeof("3. ADC reading\r\n"), HAL_MAX_DELAY);
				  HAL_UART_Transmit(&huart2, (uint8_t *)"Enter your choice : \r\n", sizeof("Enter your choice : \r\n"), HAL_MAX_DELAY);
				  uart_recieve(str);
				  choice = str[0] - '0';
				  switch(choice)
				  {
						case 1:
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
							HAL_Delay(1000);
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
							HAL_Delay(1000);
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
							HAL_Delay(1000);
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);

							HAL_Delay(2000);

							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
							HAL_Delay(1000);
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
							HAL_Delay(1000);
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
							HAL_Delay(1000);
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
							break;

						case 2:
							 HAL_UART_Transmit(&huart2, (uint8_t *)"Enter number\r\n",sizeof ("Enter number\r\n"), HAL_MAX_DELAY);
							 uart_recieve(str);
								HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
							break;

						case 3:
							HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
							value = HAL_ADC_GetValue(&hadc1);
							HAL_ADC_Stop(&hadc1);

							if(value == 1000)
							{
								HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);

								HAL_Delay(1000);

								HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
							}
							break;

				  }
			  }
			  /* USER CODE END 3 */
			}

			/**
			  * @brief System Clock Configuration
			  * @retval None
			  */
			void SystemClock_Config(void)
			{
			  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
			  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

			  /** Configure the main internal regulator output voltage
			  */
			  __HAL_RCC_PWR_CLK_ENABLE();
			  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

			  /** Initializes the RCC Oscillators according to the specified parameters
			  * in the RCC_OscInitTypeDef structure.
			  */
			  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
			  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
			  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
			  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
			  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
			  RCC_OscInitStruct.PLL.PLLM = 8;
			  RCC_OscInitStruct.PLL.PLLN = 50;
			  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
			  RCC_OscInitStruct.PLL.PLLQ = 7;
			  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
			  {
			    Error_Handler();
			  }

			  /** Initializes the CPU, AHB and APB buses clocks
			  */
			  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
			  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
			  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
			  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

			  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
			  {
			    Error_Handler();
			  }
			}

			/**
			  * @brief USART2 Initialization Function
			  * @param None
			  * @retval None
			  */
			static void MX_USART2_UART_Init(void)
			{

			  /* USER CODE BEGIN USART2_Init 0 */

			  /* USER CODE END USART2_Init 0 */

			  /* USER CODE BEGIN USART2_Init 1 */

			  /* USER CODE END USART2_Init 1 */
			  huart2.Instance = USART2;
			  huart2.Init.BaudRate = 115200;
			  huart2.Init.WordLength = UART_WORDLENGTH_8B;
			  huart2.Init.StopBits = UART_STOPBITS_1;
			  huart2.Init.Parity = UART_PARITY_NONE;
			  huart2.Init.Mode = UART_MODE_TX_RX;
			  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
			  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
			  if (HAL_UART_Init(&huart2) != HAL_OK)
			  {
			    Error_Handler();
			  }
			  /* USER CODE BEGIN USART2_Init 2 */

			  /* USER CODE END USART2_Init 2 */

			}

			/**
			  * @brief GPIO Initialization Function
			  * @param None
			  * @retval None
			  */
			static void MX_GPIO_Init(void)
			{
			  GPIO_InitTypeDef GPIO_InitStruct = {0};
			/* USER CODE BEGIN MX_GPIO_Init_1 */
			/* USER CODE END MX_GPIO_Init_1 */

			  /* GPIO Ports Clock Enable */
			  __HAL_RCC_GPIOA_CLK_ENABLE();
			  __HAL_RCC_GPIOD_CLK_ENABLE();

			  /*Configure GPIO pin Output Level */
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

			  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
			  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
			  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
			  GPIO_InitStruct.Pull = GPIO_NOPULL;
			  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

			/* USER CODE BEGIN MX_GPIO_Init_2 */
			/* USER CODE END MX_GPIO_Init_2 */
			}

			/* USER CODE BEGIN 4 */

			/* USER CODE END 4 */

			/**
			  * @brief  This function is executed in case of error occurrence.
			  * @retval None
			  */
			void Error_Handler(void)
			{
			  /* USER CODE BEGIN Error_Handler_Debug */
			  /* User can add his own implementation to report the HAL error return state */
			  __disable_irq();
			  while (1)
			  {
			  }
			  /* USER CODE END Error_Handler_Debug */
			}

			#ifdef  USE_FULL_ASSERT
			/**
			  * @brief  Reports the name of the source file and the source line number
			  *         where the assert_param error has occurred.
			  * @param  file: pointer to the source file name
			  * @param  line: assert_param error line source number
			  * @retval None
			  */
			void assert_failed(uint8_t *file, uint32_t line)
			{
			  /* USER CODE BEGIN 6 */
			  /* User can add his own implementation to report the file name and line number,
			     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
			  /* USER CODE END 6 */
			}
			#endif /* USE_FULL_ASSERT */

			do
			{
				HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
				str[i++] = ch;
			}while(ch != '\r');
			str[i++] = '\n';
			str[i] = '\0';
		}
		/* USER CODE END 0 */

		/**
		  * @brief  The application entry point.
		  * @retval int
		  */
		int main(void)
		{
		  /* USER CODE BEGIN 1 */
			uint8_t choice;
			char str[20];
		  /* USER CODE END 1 */

		  /* MCU Configuration--------------------------------------------------------*/

		  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
		  HAL_Init();
		  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
		  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;

		  /* USER CODE BEGIN Init */

		  /* USER CODE END Init */

		  /* Configure the system clock */
		  SystemClock_Config();

		  /* USER CODE BEGIN SysInit */

		  /* USER CODE END SysInit */

		  /* Initialize all configured peripherals */
		  MX_GPIO_Init();
		  MX_USART2_UART_Init();
		  MX_ADC1_Init();
		  /* USER CODE BEGIN 2 */
		  /* USER CODE END 2 */

		  /* Infinite loop */
		  /* USER CODE BEGIN WHILE */
		  while (1)
		  {
		    /* USER CODE END WHILE */

		    /* USER CODE BEGIN 3 */
						  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
			  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
		  }
		  /* USER CODE END 3 */
		}

		/**
		  * @brief System Clock Configuration
		  * @retval None
		  */
		void SystemClock_Config(void)
		{
		  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
		  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

		  /** Configure the main internal regulator output voltage
		  */
		  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);

		  /** Initializes the RCC Oscillators according to the specified parameters
		  * in the RCC_OscInitTypeDef structure.
		  */
		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
		  {
		    Error_Handler();
		  }

		  /** Initializes the CPU, AHB and APB buses clocks
		  */
		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
		                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
		  {
		    Error_Handler();
		  }
		}

		/**
		  * @brief ADC1 Initialization Function
		  * @param None
		  * @retval None
		  */
		static void MX_ADC1_Init(void)
		{

		  /* USER CODE BEGIN ADC1_Init 0 */

		  /* USER CODE END ADC1_Init 0 */

		  ADC_MultiModeTypeDef multimode = {0};
		  ADC_ChannelConfTypeDef sConfig = {0};

		  /* USER CODE BEGIN ADC1_Init 1 */

		  /* USER CODE END ADC1_Init 1 */

		  /** Common config
		  */
		  hadc1.Instance = ADC1;
		  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
		  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
		  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
		  hadc1.Init.GainCompensation = 0;
		  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
		  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
		  hadc1.Init.LowPowerAutoWait = DISABLE;
		  hadc1.Init.ContinuousConvMode = DISABLE;
		  hadc1.Init.NbrOfConversion = 1;
		  hadc1.Init.DiscontinuousConvMode = DISABLE;
		  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
		  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
		  hadc1.Init.DMAContinuousRequests = DISABLE;
		  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
		  hadc1.Init.OversamplingMode = DISABLE;
		  if (HAL_ADC_Init(&hadc1) != HAL_OK)
		  {
		    Error_Handler();
		  }

		  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
		  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
		  /** Configure the ADC multi-mode
		  */
		  multimode.Mode = ADC_MODE_INDEPENDENT;
		  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
		  {
		    Error_Handler();
		  }

		  /** Configure Regular Channel
		  */
		  sConfig.Channel = ADC_CHANNEL_1;
		  sConfig.Rank = ADC_REGULAR_RANK_1;
		  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
		  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
		  sConfig.Offset = 0;
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
		  {
		    Error_Handler();
		  }
		  /* USER CODE BEGIN ADC1_Init 2 */

		  /* USER CODE END ADC1_Init 2 */

		}

		/**
		  * @brief USART2 Initialization Function
		  * @param None
		  * @retval None
		  */
		static void MX_USART2_UART_Init(void)
		{

		  /* USER CODE BEGIN USART2_Init 0 */

		  /* USER CODE END USART2_Init 0 */

		  /* USER CODE BEGIN USART2_Init 1 */

		  /* USER CODE END USART2_Init 1 */
		  huart2.Instance = USART2;
		  huart2.Init.BaudRate = 115200;
		  huart2.Init.WordLength = UART_WORDLENGTH_8B;
		  huart2.Init.StopBits = UART_STOPBITS_1;
		  huart2.Init.Parity = UART_PARITY_NONE;
		  huart2.Init.Mode = UART_MODE_TX_RX;
		  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
		  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
		  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
		  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
		  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
		  if (HAL_UART_Init(&huart2) != HAL_OK)
		  {
		    Error_Handler();
		  }
		  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
		  {
		    Error_Handler();
		  }
		  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
		  {
		    Error_Handler();
		  }
		  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
		  {
		    Error_Handler();
		  }
		  /* USER CODE BEGIN USART2_Init 2 */

		  /* USER CODE END USART2_Init 2 */

		}

		/**
		  * @brief GPIO Initialization Function
		  * @param None
		  * @retval None
		  */
		static void MX_GPIO_Init(void)
		{
		  GPIO_InitTypeDef GPIO_InitStruct = {0};
		/* USER CODE BEGIN MX_GPIO_Init_1 */
		/* USER CODE END MX_GPIO_Init_1 */

		  /* GPIO Ports Clock Enable */
		  __HAL_RCC_GPIOA_CLK_ENABLE();
		  __HAL_RCC_GPIOD_CLK_ENABLE();

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

		  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
		  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
		  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

		/* USER CODE BEGIN MX_GPIO_Init_2 */
		/* USER CODE END MX_GPIO_Init_2 */
		}

		/* USER CODE BEGIN 4 */

		/* USER CODE END 4 */

		/**
		  * @brief  This function is executed in case of error occurrence.
		  * @retval None
		  */
		void Error_Handler(void)
		{
		  /* USER CODE BEGIN Error_Handler_Debug */
		  /* User can add his own implementation to report the HAL error return state */
		  __disable_irq();
		  while (1)
		  {
		  }
		  /* USER CODE END Error_Handler_Debug */
		}

		#ifdef  USE_FULL_ASSERT
		/**
		  * @brief  Reports the name of the source file and the source line number
		  *         where the assert_param error has occurred.
		  * @param  file: pointer to the source file name
		  * @param  line: assert_param error line source number
		  * @retval None
		  */
		void assert_failed(uint8_t *file, uint32_t line)
		{
		  /* USER CODE BEGIN 6 */
		  /* User can add his own implementation to report the file name and line number,
		     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
		  /* USER CODE END 6 */
		}
		#endif /* USE_FULL_ASSERT */
	nitStruct.Pin = OTG_FS_OverCurrent_Pin;
		  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
		  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

		  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
		  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
		  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
		  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

		  /*Configure GPIO pin : MEMS_INT2_Pin */
		  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
		  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
		  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);

		/* USER CODE BEGIN MX_GPIO_Init_2 */
		/* USER CODE END MX_GPIO_Init_2 */
		}

		/* USER CODE BEGIN 4 */

		/* USER CODE END 4 */

		/**
		  * @brief  This function is executed in case of error occurrence.
		  * @retval None
		  */
		void Error_Handler(void)
		{
		  /* USER CODE BEGIN Error_Handler_Debug */
		  /* User can add his own implementation to report the HAL error return state */
		  __disable_irq();
		  while (1)
		  {
		  }
		  /* USER CODE END Error_Handler_Debug */
		}

		#ifdef  USE_FULL_ASSERT
		/**
		  * @brief  Reports the name of the source file and the source line number
		  *         where the assert_param error has occurred.
		  * @param  file: pointer to the source file name
		  * @param  line: assert_param error line source number
		  * @retval None
		  */
		void assert_failed(uint8_t *file, uint32_t line)
		{
		  /* USER CODE BEGIN 6 */
		  /* User can add his own implementation to report the file name and line number,
		     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
		  /* USER CODE END 6 */
		}
		#endif /* USE_FULL_ASSERT */
			    *  source number
			    * @retval None
			    */
			  void assert_failed(uint8_t *file, uint32_t line)
			  {
			    /* USER CODE BEGIN 6 */
			    /* User can add his own implementation to report the file name and line number,
			       ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
			    /* USER CODE END 6 */
			  }
			  #endif /* USE_FULL_ASSERT */

		    /* USER CODE END WHILE */
	-
		    /* USER CODE BEGIN 3 */
			  HAL_UART_Transmit(&huart2, (uint8_t *)"Name: MOHD SAYEED\r\n", sizeof("Name: MOHD SAYEED\r\n"), HAL_MAX_DELAY);
			  HAL_UART_Transmit(&huart2, (uint8_t *)"Roll_n0 : 80299\r\n", sizeof("Roll_n0 : 80299\r\n"), HAL_MAX_DELAY);

			  HAL_UART_Transmit(&huart2, (uint8_t *)"1. LED pattern\r\n", sizeof("1. LED pattern\r\n"), HAL_MAX_DELAY);
			  HAL_UART_Transmit(&huart2, (uint8_t *)"2. Parity check\r\n", sizeof("2. Parity check\r\n"), HAL_MAX_DELAY);
			  HAL_UART_Transmit(&huart2, (uint8_t *)"3. ADC reading\r\n", sizeof("3. ADC reading\r\n"), HAL_MAX_DELAY);
			  HAL_UART_Transmit(&huart2, (uint8_t *)"Enter your choice : \r\n", sizeof("Enter your choice : \r\n"), HAL_MAX_DELAY);
			  uart_recieve(str);
			  choice = str[0] - '0';
			  switch(choice)
			  {
					case 1:
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
						HAL_Delay(1000);
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
						HAL_Delay(1000);
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
						HAL_Delay(1000);
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);

						HAL_Delay(2000);

						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
						HAL_Delay(1000);
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
						HAL_Delay(1000);
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
						HAL_Delay(1000);
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
						break;

					case 2:
						 HAL_UART_Transmit(&huart2, (uint8_t *)"Enter number\r\n",sizeof ("Enter number\r\n"), HAL_MAX_DELAY);
						 uart_recieve(str);
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
						break;

					case 3:
						HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
						value = HAL_ADC_GetValue(&hadc1);
						HAL_ADC_Stop(&hadc1);

						if(value == 1000)
						{
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);

							HAL_Delay(1000);

							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
						}
						break;

			  }
		  }
		  /* USER CODE END 3 */
		}

		/**
		  * @brief System Clock Configuration
		  * @retval None
		  */
		void SystemClock_Config(void)
		{
		  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
		  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

		  /** Configure the main internal regulator output voltage
		  */
		  __HAL_RCC_PWR_CLK_ENABLE();
		  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

		  /** Initializes the RCC Oscillators according to the specified parameters
		  * in the RCC_OscInitTypeDef structure.
		  */
		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
		  RCC_OscInitStruct.PLL.PLLM = 8;
		  RCC_OscInitStruct.PLL.PLLN = 50;
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
		  RCC_OscInitStruct.PLL.PLLQ = 7;
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
		  {
		    Error_Handler();
		  }

		  /** Initializes the CPU, AHB and APB buses clocks
		  */
		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
		                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
		  {
		    Error_Handler();
		  }
		}

		/**
		  * @brief USART2 Initialization Function
		  * @param None
		  * @retval None
		  */
		static void MX_USART2_UART_Init(void)
		{

		  /* USER CODE BEGIN USART2_Init 0 */

		  /* USER CODE END USART2_Init 0 */

		  /* USER CODE BEGIN USART2_Init 1 */

		  /* USER CODE END USART2_Init 1 */
		  huart2.Instance = USART2;
		  huart2.Init.BaudRate = 115200;
		  huart2.Init.WordLength = UART_WORDLENGTH_8B;
		  huart2.Init.StopBits = UART_STOPBITS_1;
		  huart2.Init.Parity = UART_PARITY_NONE;
		  huart2.Init.Mode = UART_MODE_TX_RX;
		  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
		  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
		  if (HAL_UART_Init(&huart2) != HAL_OK)
		  {
		    Error_Handler();
		  }
		  /* USER CODE BEGIN USART2_Init 2 */

		  /* USER CODE END USART2_Init 2 */

		}

		/**
		  * @brief GPIO Initialization Function
		  * @param None
		  * @retval None
		  */
		static void MX_GPIO_Init(void)
		{
		  GPIO_InitTypeDef GPIO_InitStruct = {0};
		/* USER CODE BEGIN MX_GPIO_Init_1 */
		/* USER CODE END MX_GPIO_Init_1 */

		  /* GPIO Ports Clock Enable */
		  __HAL_RCC_GPIOA_CLK_ENABLE();
		  __HAL_RCC_GPIOD_CLK_ENABLE();

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

		  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
		  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
		  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

		/* USER CODE BEGIN MX_GPIO_Init_2 */
		/* USER CODE END MX_GPIO_Init_2 */
		}

		/* USER CODE BEGIN 4 */

		/* USER CODE END 4 */

		/**
		  * @brief  This function is executed in case of error occurrence.
		  * @retval None
		  */
		void Error_Handler(void)
		{
		  /* USER CODE BEGIN Error_Handler_Debug */
		  /* User can add his own implementation to report the HAL error return state */
		  __disable_irq();
		  while (1)
		  {
		  }
		  /* USER CODE END Error_Handler_Debug */
		}

		#ifdef  USE_FULL_ASSERT
		/**
		  * @brief  Reports the name of the source file and the source line number
		  *         where the assert_param error has occurred.
		  * @param  file: pointer to the source file name
		  * @param  line: assert_param error line source number
		  * @retval None
		  */
		void assert_failed(uint8_t *file, uint32_t line)
		{
		  /* USER CODE BEGIN 6 */
		  /* User can add his own implementation to report the file name and line number,
		     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
		  /* USER CODE END 6 */
		}
		#endif /* USE_FULL_ASSERT */

		do
		{
			HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
			str[i++] = ch;
		}while(ch != '\r');
		str[i++] = '\n';
		str[i] = '\0';
	}
	/* USER CODE END 0 */

	/**
	  * @brief  The application entry point.
	  * @retval int
	  */
	int main(void)
	{
	  /* USER CODE BEGIN 1 */
		uint8_t choice;
		char str[20];
	  /* USER CODE END 1 */

	  /* MCU Configuration--------------------------------------------------------*/

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;

	  /* USER CODE BEGIN Init */

	  /* USER CODE END Init */

	  /* Configure the system clock */
	  SystemClock_Config();

	  /* USER CODE BEGIN SysInit */

	  /* USER CODE END SysInit */

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
	  MX_USART2_UART_Init();
	  MX_ADC1_Init();
	  /* USER CODE BEGIN 2 */
	  /* USER CODE END 2 */

	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	  while (1)
	  {
	    /* USER CODE END WHILE */

	    /* USER CODE BEGIN 3 */
		  HAL_UART_Transmit(&huart2, (uint8_t *)"Name: MOHD SAYEED\r\n", sizeof("Name: MOHD SAYEED\r\n"), HAL_MAX_DELAY);
		  HAL_UART_Transmit(&huart2, (uint8_t *)"Roll_n0 : 80299\r\n", sizeof("Roll_n0 : 80299\r\n"), HAL_MAX_DELAY);

		  HAL_UART_Transmit(&huart2, (uint8_t *)"1. LED pattern\r\n", sizeof("1. LED pattern\r\n"), HAL_MAX_DELAY);
		  HAL_UART_Transmit(&huart2, (uint8_t *)"2. Parity check\r\n", sizeof("2. Parity check\r\n"), HAL_MAX_DELAY);
		  HAL_UART_Transmit(&huart2, (uint8_t *)"3. ADC reading\r\n", sizeof("3. ADC reading\r\n"), HAL_MAX_DELAY);
		  HAL_UART_Transmit(&huart2, (uint8_t *)"Enter your choice : \r\n", sizeof("Enter your choice : \r\n"), HAL_MAX_DELAY);
		  uart_recieve(str);
		  choice = str[0] - '0';
		  switch(choice)
		  {
				case 1:
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
					HAL_Delay(1000);
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
					HAL_Delay(1000);
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
					HAL_Delay(1000);
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);

					HAL_Delay(2000);

					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
					HAL_Delay(1000);
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
					HAL_Delay(1000);
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
					HAL_Delay(1000);
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
					break;

				case 2:
					 HAL_UART_Transmit(&huart2, (uint8_t *)"Enter number\r\n",sizeof ("Enter number\r\n"), HAL_MAX_DELAY);
					 uart_recieve(str);
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
					break;

				case 3:
					HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
					value = HAL_ADC_GetValue(&hadc1);
					HAL_ADC_Stop(&hadc1);

					if(value == 1000)
					{
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);

						HAL_Delay(1000);

						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
					}
					break;

		  }
		  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
		  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
	  }
	  /* USER CODE END 3 */
	}

	/**
	  * @brief System Clock Configuration
	  * @retval None
	  */
	void SystemClock_Config(void)
	{
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	  /** Configure the main internal regulator output voltage
	  */
	  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	  {
	    Error_Handler();
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
	  {
	    Error_Handler();
	  }
	}

	/**
	  * @brief ADC1 Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_ADC1_Init(void)
	{

	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_MultiModeTypeDef multimode = {0};
	  ADC_ChannelConfTypeDef sConfig = {0};

	  /* USER CODE BEGIN ADC1_Init 1 */

	  /* USER CODE END ADC1_Init 1 */

	  /** Common config
	  */
	  hadc1.Instance = ADC1;
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	  hadc1.Init.GainCompensation = 0;
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	  hadc1.Init.LowPowerAutoWait = DISABLE;
	  hadc1.Init.ContinuousConvMode = DISABLE;
	  hadc1.Init.NbrOfConversion = 1;
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	  hadc1.Init.DMAContinuousRequests = DISABLE;
	  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
	  hadc1.Init.OversamplingMode = DISABLE;
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
	  {
	    Error_Handler();
	  }

	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
	  {
	    Error_Handler();
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
	  sConfig.Rank = ADC_REGULAR_RANK_1;
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
	  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
	  sConfig.Offset = 0;
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
	  {
	    Error_Handler();
	  }
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */

	}

	/**
	  * @brief USART2 Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_USART2_UART_Init(void)
	{

	  /* USER CODE BEGIN USART2_Init 0 */

	  /* USER CODE END USART2_Init 0 */

	  /* USER CODE BEGIN USART2_Init 1 */

	  /* USER CODE END USART2_Init 1 */
	  huart2.Instance = USART2;
	  huart2.Init.BaudRate = 115200;
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
	  huart2.Init.StopBits = UART_STOPBITS_1;
	  huart2.Init.Parity = UART_PARITY_NONE;
	  huart2.Init.Mode = UART_MODE_TX_RX;
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
	  if (HAL_UART_Init(&huart2) != HAL_OK)
	  {
	    Error_Handler();
	  }
	  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
	  {
	    Error_Handler();
	  }
	  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
	  {
	    Error_Handler();
	  }
	  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
	  {
	    Error_Handler();
	  }
	  /* USER CODE BEGIN USART2_Init 2 */

	  /* USER CODE END USART2_Init 2 */

	}

	/**
	  * @brief GPIO Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_GPIO_Init(void)
	{
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
	  __HAL_RCC_GPIOD_CLK_ENABLE();

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

	  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
	}

	/* USER CODE BEGIN 4 */

	/* USER CODE END 4 */

	/**
	  * @brief  This function is executed in case of error occurrence.
	  * @retval None
	  */
	void Error_Handler(void)
	{
	  /* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
	  {
	  }
	  /* USER CODE END Error_Handler_Debug */
	}

	#ifdef  USE_FULL_ASSERT
	/**
	  * @brief  Reports the name of the source file and the source line number
	  *         where the assert_param error has occurred.
	  * @param  file: pointer to the source file name
	  * @param  line: assert_param error line source number
	  * @retval None
	  */
	void assert_failed(uint8_t *file, uint32_t line)
	{
	  /* USER CODE BEGIN 6 */
	  /* User can add his own implementation to report the file name and line number,
	     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	  /* USER CODE END 6 */
	}
	#endif /* USE_FULL_ASSERT */


